import "module:std" as std

var HttpClient = std.HttpClient
var HttpResponse = std.HttpResponse
var RequestOptions = std.RequestOptions

class PluginUpdater {
  var client: HttpClient

  construct (this.client)

  /// Checks for updates to the plugin.
  /// [currentConfig] is just plugin.json's file content.
  ///
  /// If there's an update available, it will return a map of:
  /// - [downloadUrl] -> direct download url to the new plugin.smplug file.
  /// - [version] of the new plugin.
  /// - [changelog] Optionally, a changelog for the update (markdown supported).
  ///
  /// If no update is available, it will return null.
  fun check(currentConfig: Map) -> Future {
    var versionParts = currentConfig["version"].split(".")
    var major = int.parse(versionParts[0])
    var minor = int.parse(versionParts[1])
    var patch = int.parse(versionParts[2])

    return client.get_req(
      "https://api.github.com/repos/KRTirtho/spotube-plugin-musicbrainz-listenbrainz/releases/latest",
      options: RequestOptions(
        headers: {
          "Accept": "application/vnd.github.v3+json"
        }.toJson()
      ),
    ).then((res) {
      var data = res.data
      var latestVersion = data["tag_name"].split(".")

      if (latestVersion.length < 3) {
        throw "Invalid version format from GitHub API. Expected format: <major>.<minor>.<patch>. Got: ${data["tag_name"]}"
      }

      var latestMajor = int.parse(latestVersion[0])
      var latestMinor = int.parse(latestVersion[1])
      var latestPatch = int.parse(latestVersion[2])

      var isUpdateAvailable = latestMajor > major ||
        (latestMajor == major && latestMinor > minor) ||
        (latestMajor == major && latestMinor == minor && latestPatch > patch)

      if (!isUpdateAvailable) return null

      var downloadUrl = data["assets"].firstWhere(
        (asset) => asset["name"] == "plugin.smplug",
        orElse: () => null
      )?["browser_download_url"]

      if (downloadUrl == null) {
        throw "No download URL found for the plugin update"
      }

      var changelog = data["body"] ?? "No changelog available"
      return {
        "downloadUrl": downloadUrl,
        "version": data["tag_name"],
        "changelog": changelog
      }.toJson()
    })
  }
}

export { PluginUpdater }